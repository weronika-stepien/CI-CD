pipeline {
    agent {
        docker {
            image 'weronikastepien/cicd-todo-agent:1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        IMAGE_TAG = "${BUILD_NUMBER}"
        DOCKER_IMAGE = "weronikastepien/cicd-todo{BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
        SONAR_URL = "http://${env.SONAR_HOST}:9000" // SonarQube running on localhost or IP
        ARGOCD_URL = "${env.ARGOCD_URL}" // ArgoCD endpoint from Minikube
    }

    stages {
        stage('Checkout') {
            steps {
                git credentialsId: 'github-id', 
                    url: 'https://github.com/weronika-stepien/CI-CD.git',
                    branch: 'main'
            }
        }

        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    dir('CI_CD-Python-WebApp-ToDoList/ToDo') {
                        sh '''
                        sonar-scanner \
                            -Dsonar.projectKey=CI_CD_Python_ToDoList \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=${SONAR_URL} \
                            -Dsonar.login=$SONAR_AUTH_TOKEN
                        '''
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
             environment {
        DOCKER_IMAGE = "weronikastepien/cicd-todo-docker:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
            steps {
                script {
                    dir('CI_CD-Python-WebApp-ToDoList/ToDo') {
                        sh '''
                        echo "BUILD DOCKER IMAGE FOR PYTHON APP"
                        docker build -t ${DOCKER_IMAGE} -f Dockerfile .
                        '''
                        def dockerImage = docker.image("${DOCKER_IMAGE}")
                        docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                            dockerImage.push()
                        }
                    }
                }
            }
        }

        stage('Checkout K8S Manifest') {
            steps {
                git credentialsId: 'github-id', 
                    url: 'https://github.com/weronika-stepien/CI-CD.git',
                    branch: 'main'
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "CI-CD"
                GIT_USER_NAME = "weronika-stepien"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        set -x
                        apk add git || apt-get update && apt-get install -y git || yum install -y git
                        git config user.email "weronika.stepien.it@gmail.com"
                        git config user.name "Weronika Stepien"
                        BUILD_NUMBER=${BUILD_NUMBER}
                        sed -i "/image: weronikastepien\\/cicd-todo-docker:/ s/:\\([0-9]\\+\\)/:${BUILD_NUMBER}/" CI_CD-Python-WebApp-ToDoList/ToDo_Manifests/minikube-todo-deploy.yaml
                        git add CI_CD-Python-WebApp-ToDoList/ToDo_Manifests/minikube-todo-deploy.yaml
                        git commit -m "JENKINS: Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
                    '''
                }
            }
        }

        stage('Deploy to ArgoCD') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'argocd-cred', usernameVariable: 'ARGOCD_USERNAME', passwordVariable: 'ARGOCD_PASSWORD')]) {
                        sh '''
                        # Log in to ArgoCD
                        curl -k -X POST ${ARGOCD_URL}/api/v1/session -d '{"username": "'$ARGOCD_USERNAME'", "password": "'$ARGOCD_PASSWORD'"}' -H "Content-Type: application/json" | jq -r '.token' > /tmp/argocd-token

                        # Deploy the application (assuming a pre-configured app in ArgoCD)
                        curl -k -X POST ${ARGOCD_URL}/api/v1/applications/todo/sync \
                        -H "Authorization: Bearer $(cat /tmp/argocd-token)" \
                        -H "Content-Type: application/json"
                        '''
                    }
                }
            }
        }
    }
}
